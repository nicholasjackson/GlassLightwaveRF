package com.njackson.glass.lightwave.activities;

import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.njackson.glass.lightwave.R;
import com.njackson.glass.lightwave.cards.TuggableView;
import com.njackson.glass.lightwave.client.LightwaveAPI;
import com.njackson.glass.lightwave.client.ReceiveUDP;
import com.njackson.glass.lightwave.client.ResponseParser;
import com.njackson.glass.lightwave.client.SendUDP;
import com.njackson.glass.lightwave.entities.Config;
import com.njackson.glass.lightwave.entities.Light;
import com.njackson.glass.lightwave.parser.VoiceParser;
import com.njackson.glass.lightwave.parser.VoiceParserException;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.speech.RecognizerIntent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;

import java.io.IOException;
import java.util.ArrayList;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;
    private Config _config;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        loadConfig();

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });
        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }

    private void loadConfig() {
        _config = Config.parseJSON(getString(R.string.config));
    }

    @Override
    protected void onResume() {
        super.onResume();
        getVoiceCommand();
    }

    protected void getVoiceCommand() {
        ArrayList<String> voiceResults = getIntent().getExtras()
                .getStringArrayList(RecognizerIntent.EXTRA_RESULTS);
        try {
            VoiceParser parser = new VoiceParser(voiceResults.get(0),_config);
            LightwaveAPI api = new LightwaveAPI(new SendUDP(),new ReceiveUDP());

            ResponseParser.Response resp = null;
            if (parser.get_action() == VoiceParser.Action.REGISTER_GLASS) {
                resp = api.forceRegistration();
            } else {
                if(parser.get_action() == VoiceParser.Action.OFF) {
                    resp = api.sendRoomOff(parser.get_room().id);
                } else {
                    for(Light light: parser.get_room().lights)
                        resp = api.sendDeviceOnOff(parser.get_room().id,light.id,VoiceParser.Action.ON.toInt());
                }
            }

            ((TuggableView)mView).setMainText(parser.get_room().name + " " + parser.get_device().toString() + " " + parser.get_action().toString());

        } catch (VoiceParserException e) {
            e.printStackTrace();
            ((TuggableView)mView).setMainText("Unknown command");
        } catch (IOException e) {
            e.printStackTrace();
            ((TuggableView)mView).setMainText("Sorry, something went wrong");
        }

        mCardScroller.activate();

    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private View buildView() {
        return new TuggableView(this,R.layout.tuggable_view);
    }

}
